#!/usr/local/env groovy

void slack(Map params = [:], String channel, String message) {
    Map defaultParams = [
            color: "#000000",
            baseUrl: "https://nvidia.slack.com/services/hooks/jenkins-ci/",
            tokenCredentialId: "slack_token"
    ]

    params["channel"] = channel
    params["message"] = "${BUILD_URL}\n" + message

    slackSend(defaultParams << params)
}

/**
*
* Jenkins file for xgboost with multi versions
*
*/

pipeline {
    agent { label 'vanilla' }

    options {
        ansiColor('xterm')
        timeout(time: 240, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        string(name: 'CUDF_VER', defaultValue: '0.9-SNAPSHOT',
            description: '-Dcudf.version=0.9-SNAPSHOT\n\n Defautl for cudf version')
        string(name: 'XGB_VER', defaultValue: '1.0.0-SNAPSHOT',
            description: '-Dxgboost.version=1.0.0-SNAPSHOT\n\n Defautl for xgboost version')
        booleanParam(name: 'BUILD_CENTOS7', defaultValue: true,
            description: 'Whether to enable build for Centos7')
        booleanParam(name: 'FULL_TEST_SPARK', defaultValue: false,
            description: 'Whether to test on spark2.3.3 & spark2.4.3, default to run cuda9 on spark 2.3.3, cuda10 on spark 2.4.3')
        booleanParam(name: 'SIMPLE_DATA', defaultValue: false,
            description: 'simple datasets')
        string(name: 'REF', defaultValue: 'support-gpu', description: 'Commit to build')
    }

    environment {
        JENKINS_ROOT  = 'xgboost/jenkins'
        BUILD_SCRIPT = '$JENKINS_ROOT/build-sample.sh'
        TEST_SCRIPT = '$JENKINS_ROOT/test-sample.sh'
        BUILD_ARG="-Dcudf.version=$CUDF_VER -Dxgboost.version=$XGB_VER"
        TEST_ARG_CUDA9_SPARK233="9.2 $CUDF_VER $XGB_VER ${params.SIMPLE_DATA} 2.3.3"
        TEST_ARG_CUDA9_SPARK243="9.2 $CUDF_VER $XGB_VER ${params.SIMPLE_DATA} 2.4.3"
        TEST_ARG_CUDA10_SPARK233="10.0 $CUDF_VER $XGB_VER ${params.SIMPLE_DATA} 2.3.3"
        TEST_ARG_CUDA10_SPARK243="10.0 $CUDF_VER $XGB_VER ${params.SIMPLE_DATA} 2.4.3"
    }

    // After xgboost nightly CI finished at 0 am.,
    // trigger this nightly CI 3 am.
    triggers {
        cron('H 3 * * *')
    }

    stages {
        stage('Build and Test') {
            parallel {
                stage('Ubuntu16 CUDA9.2') {
                    agent { label 'docker-gpu' }
                    steps {
                        script {
                            // Can't use ARG in Dockerfile's FROM line https://issues.jenkins-ci.org/browse/JENKINS-31507
                            String imageName = "nvidia/cuda:ubuntu16-cuda9.2"
                            sh("docker build -f $JENKINS_ROOT/Dockerfile.ubuntu16 -t $imageName --build-arg CUDA_VER=9.2 $JENKINS_ROOT")
                            docker.image(imageName).inside {
                                echo 'buiding ubuntu16 cuda9.2 ...'
                                sh "bash $BUILD_SCRIPT '$BUILD_ARG'"
                            }
                            docker.image(imageName).inside("--runtime=nvidia -v /data:/data:ro -v /etc/passwd:/etc/passwd:ro") {
                                echo 'testing sample app on ubuntu16 cuda9.2 ...'
                                sh "bash -i $TEST_SCRIPT $TEST_ARG_CUDA9_SPARK233"
                                if (params.FULL_TEST_SPARK) {
                                    sh "bash -i $TEST_SCRIPT $TEST_ARG_CUDA9_SPARK243"
                                }
                            }
                        }
                    }
                }

                stage('Ubuntu16 CUDA10.0') {
                    agent { label 'docker-gpu' }
                    steps {
                        script {
                            String imageName = "nvidia/cuda:ubuntu16-cuda10.0"
                            sh("docker build -f $JENKINS_ROOT/Dockerfile.ubuntu16 -t $imageName --build-arg CUDA_VER=10.0 $JENKINS_ROOT")
                            docker.image(imageName).inside {
                                echo 'buiding ubuntu16 cuda10.0 ...'
                                sh "bash $BUILD_SCRIPT '$BUILD_ARG'"
                            }
                            docker.image(imageName).inside("--runtime=nvidia -v /data:/data:ro -v /etc/passwd:/etc/passwd:ro") {
                                echo 'testing sample app on ubuntu16 cuda10.0 ...'
                                sh "bash -i $TEST_SCRIPT $TEST_ARG_CUDA10_SPARK243"
                                if (params.FULL_TEST_SPARK) {
                                    sh "bash -i $TEST_SCRIPT $TEST_ARG_CUDA10_SPARK233"
                                }
                            }
                        }
                    }
                }

                stage('Centos7 CUDA9.2') {
                    when {
                        environment name: 'BUILD_CENTOS7', value: 'true'
                    }
                    agent { label 'docker-gpu' }
                    steps {
                        script {
                            String imageName = "nvidia/cuda:centos7-cuda9.2"
                            sh("docker build -f $JENKINS_ROOT/Dockerfile.centos7 -t $imageName --build-arg CUDA_VER=9.2 $JENKINS_ROOT")
                            docker.image(imageName).inside {
                                echo 'buiding centos7 cuda9.2 ...'
                                sh "bash $BUILD_SCRIPT '$BUILD_ARG'"
                            }
                            docker.image(imageName).inside("--runtime=nvidia -v /data:/data:ro -v /etc/passwd:/etc/passwd:ro") {
                                echo 'testing sample app on centos7 cuda9.2 ...'
                                sh "bash -i $TEST_SCRIPT $TEST_ARG_CUDA9_SPARK233"
                                if (params.FULL_TEST_SPARK) {
                                    sh "bash -i $TEST_SCRIPT $TEST_ARG_CUDA9_SPARK243"
                                }
                            }
                        }
                    }
                }

                stage('Centos7 CUDA10.0') {
                    when {
                        environment name: 'BUILD_CENTOS7', value: 'true'
                    }
                    agent { label 'docker-gpu' }
                    steps {
                        script {
                            String imageName = "nvidia/cuda:centos7-cuda10.0"
                            sh("docker build -f $JENKINS_ROOT/Dockerfile.centos7 -t $imageName --build-arg CUDA_VER=10.0 $JENKINS_ROOT")
                            docker.image(imageName).inside {
                                echo 'buiding centos7 cuda10.0 ...'
                                sh "bash $BUILD_SCRIPT '$BUILD_ARG'"
                            }
                            docker.image(imageName).inside("--runtime=nvidia -v /data:/data:ro -v /etc/passwd:/etc/passwd:ro") {
                                echo 'testing sample app on centos7 cuda10.0 ...'
                                sh "bash -i $TEST_SCRIPT $TEST_ARG_CUDA10_SPARK243"
                                if (params.FULL_TEST_SPARK) {
                                    sh "bash -i $TEST_SCRIPT $TEST_ARG_CUDA10_SPARK233"
                                }
                            }
                        }
                    }
                }
            }//end of parallel
        }//end of stage('build and test')
    } // end of stages
    post {
        always {
            script {
                if (currentBuild.currentResult == "SUCCESS") {
                    updateGitlabCommitStatus(name: 'Jenkins CI', state: "success")
                    slack("#rapidsai-spark-cicd", "Success", color: "#33CC33")
                } else {
                    updateGitlabCommitStatus(name: 'Jenkins CI', state: "failed")
                    slack("#rapidsai-spark-cicd", "Failed", color: "#FF0000")
                }
            }
        }
    }
} // end of pipeline
